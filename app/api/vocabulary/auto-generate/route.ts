import { NextRequest, NextResponse } from 'next/server'
import { generateText } from '@/lib/gemini'
import { getSupabaseAdmin } from '@/lib/supabase'

// 自动生成单词的API端点 - 2025-01-27 15:30:45 - 修复API调用逻辑
export async function POST(request: NextRequest) {
  try {
    console.log('Auto-generation triggered')
    
    // 检查环境变量
    if (!process.env.GOOGLE_GEMINI_API_KEY) {
      console.error('Missing GOOGLE_GEMINI_API_KEY')
      return NextResponse.json(
        { error: 'AI service not configured', success: false },
        { status: 500 }
      )
    }
    
    if (!process.env.NEXT_PUBLIC_SUPABASE_URL || !process.env.SUPABASE_SERVICE_ROLE_KEY) {
      console.error('Missing Supabase configuration')
      return NextResponse.json(
        { error: 'Database service not configured', success: false },
        { status: 500 }
      )
    }

    // 直接调用内部生成逻辑，而不是外部API
    const userId = '00000000-0000-0000-0000-000000000001' // Fixed UUID format for demo user
    const batchSize = 5 // 减少批次大小避免超时
    const totalTarget = 3000

    console.log(`Starting auto-generation: ${batchSize} words for user: ${userId}`)
    
    // 使用admin客户端绕过RLS策略
    const supabaseAdmin = getSupabaseAdmin()

    // 检查现有词汇数量
    const { data: existingWords, error: countError } = await supabaseAdmin
      .from('flashcards')
      .select('word')
      .eq('user_id', userId)
      .eq('type', 'vocabulary')

    if (countError) {
      console.error('Error counting existing words:', countError)
      return NextResponse.json({
        success: false,
        error: 'Failed to count existing words'
      }, { status: 500 })
    }

    const existingCount = existingWords?.length || 0
    const remainingWords = Math.max(0, totalTarget - existingCount)
    
    console.log(`Existing words: ${existingCount}, Target: ${totalTarget}, Remaining: ${remainingWords}`)

    if (remainingWords <= 0) {
      return NextResponse.json({
        success: true,
        message: `Already have ${existingCount} words, target reached!`,
        stats: {
          totalGenerated: 0,
          existingWords: existingCount,
          newTotal: existingCount,
          targetRemaining: 0
        }
      })
    }

    // 简化的AI提示词，更可靠
    const prompt = `Generate ${batchSize} SSAT vocabulary words as JSON:

{
  "words": [
    {
      "word": "perspicacious",
      "definition": "Having keen insight and understanding",
      "pronunciation": "/ˌpɜːrspɪˈkeɪʃəs/",
      "part_of_speech": "adjective",
      "difficulty": "hard",
      "example_sentence": "The perspicacious student quickly understood the complex problem.",
      "synonyms": ["perceptive", "insightful"],
      "antonyms": ["obtuse", "dull"],
      "memory_tip": "Think of 'perspective' - someone with good perspective is perspicacious"
    }
  ]
}

Requirements:
- SSAT/SAT level words
- Clear definitions
- Valid pronunciation guides
- Real example sentences

Return only valid JSON.`

    try {
      console.log('Generating words with AI...')
      const aiResponse = await generateText(prompt, 30000) // 30秒超时
      const cleanResponse = aiResponse.replace(/```json\n?|\n?```/g, '').trim()
      const parsedResponse = JSON.parse(cleanResponse)

      if (parsedResponse.words && Array.isArray(parsedResponse.words)) {
        const batchWords = parsedResponse.words.filter((word: any) => 
          word.word && word.definition && word.pronunciation
        )

        if (batchWords.length === 0) {
          return NextResponse.json({
            success: false,
            error: 'No valid words generated by AI'
          }, { status: 500 })
        }

        // 插入到数据库
        const wordsToInsert = batchWords.map((word: any) => ({
          user_id: userId,
          word: word.word.toLowerCase(),
          definition: word.definition,
          type: 'vocabulary',
          subject: 'SSAT Vocabulary',
          difficulty_level: word.difficulty === 'easy' ? 1 : word.difficulty === 'hard' ? 3 : 2,
          question: `What does "${word.word}" mean?`,
          answer: word.definition,
          explanation: word.definition,
          pronunciation: word.pronunciation || '',
          part_of_speech: word.part_of_speech || '',
          example_sentence: word.example_sentence || '',
          memory_tip: word.memory_tip || '',
          synonyms: word.synonyms || [],
          antonyms: word.antonyms || [],
          etymology: '',
          category: 'vocabulary',
          frequency_score: 50,
          source_type: 'ai_generated',
          source_context: 'Auto-generated vocabulary',
          tags: ['vocabulary', 'ssat'],
          is_public: true,
          usage_count: 0,
          avg_rating: 0
        }))

        console.log(`Attempting to insert ${wordsToInsert.length} words into database...`)

        const { data: insertedWords, error: insertError } = await supabaseAdmin
          .from('flashcards')
          .insert(wordsToInsert)
          .select('word')

        if (insertError) {
          console.error('Insert error:', insertError)
          return NextResponse.json({
            success: false,
            error: 'Failed to insert words into database',
            details: insertError.message
          }, { status: 500 })
        }

        const totalGenerated = insertedWords?.length || 0
        console.log(`Auto-generation successful: ${totalGenerated} words added`)

        return NextResponse.json({
          success: true,
          message: `Auto-generated ${totalGenerated} new words`,
          stats: {
            totalGenerated,
            existingWords: existingCount,
            newTotal: existingCount + totalGenerated,
            targetRemaining: Math.max(0, totalTarget - existingCount - totalGenerated)
          }
        })

      } else {
        return NextResponse.json({
          success: false,
          error: 'Invalid AI response format'
        }, { status: 500 })
      }

    } catch (aiError) {
      console.error('AI generation error:', aiError)
      return NextResponse.json({
        success: false,
        error: 'AI generation failed',
        details: aiError instanceof Error ? aiError.message : 'Unknown AI error'
      }, { status: 500 })
    }
    
  } catch (error) {
    console.error('Auto-generation error:', error)
    return NextResponse.json(
      { 
        success: false,
        error: 'Auto-generation service error',
        details: error instanceof Error ? error.message : 'Unknown error'
      },
      { status: 500 }
    )
  }
}

// GET方法返回自动生成的状态 - 2025-01-27 15:30:45 - 修复状态检查逻辑
export async function GET() {
  try {
    // 直接查询数据库获取当前词汇数量
    const supabaseAdmin = getSupabaseAdmin()
    const userId = '00000000-0000-0000-0000-000000000001'
    
    const { data: existingWords, error: countError } = await supabaseAdmin
      .from('flashcards')
      .select('word')
      .eq('user_id', userId)
      .eq('type', 'vocabulary')

    if (countError) {
      console.error('Error counting words for status check:', countError)
      return NextResponse.json({
        message: 'Auto-generation service status check failed',
        error: countError.message,
        interval: '5 minutes',
        target: 3000,
        batchSize: 5
      }, { status: 500 })
    }

    const totalWords = existingWords?.length || 0
    const targetRemaining = Math.max(0, 3000 - totalWords)
    
    return NextResponse.json({
      message: 'Auto-generation service is active',
      interval: '5 minutes',
      target: 3000,
      batchSize: 5,
      currentStatus: {
        totalWords,
        targetRemaining
      },
      lastCheck: new Date().toISOString()
    })
  } catch (error) {
    console.error('Status check error:', error)
    return NextResponse.json({
      message: 'Auto-generation service status check failed',
      error: error instanceof Error ? error.message : 'Unknown error',
      interval: '5 minutes',
      target: 3000,
      batchSize: 5
    }, { status: 500 })
  }
}